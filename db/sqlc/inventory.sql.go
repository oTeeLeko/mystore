// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: inventory.sql

package db

import (
	"context"
	"database/sql"
)

const addInventory = `-- name: AddInventory :exec
INSERT INTO Inventories (
  ProductID,
  Quantity
) VALUES (
  ?, ?
)
`

type AddInventoryParams struct {
	Productid string `json:"productid"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) AddInventory(ctx context.Context, arg AddInventoryParams) error {
	_, err := q.db.ExecContext(ctx, addInventory, arg.Productid, arg.Quantity)
	return err
}

const deleteInventory = `-- name: DeleteInventory :exec
DELETE FROM Inventories
WHERE ID = ?
`

func (q *Queries) DeleteInventory(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteInventory, id)
	return err
}

const getInventory = `-- name: GetInventory :one
SELECT 
  Inventories.ID,
  Inventories.ProductID,
  Products.Name,
  Inventories.Quantity
FROM Inventories
LEFT JOIN Products ON Inventories.ProductID = Products.ID
WHERE Inventories.ProductID = ?
LIMIT 1
`

type GetInventoryRow struct {
	ID        string         `json:"id"`
	Productid string         `json:"productid"`
	Name      sql.NullString `json:"name"`
	Quantity  int32          `json:"quantity"`
}

func (q *Queries) GetInventory(ctx context.Context, productid string) (GetInventoryRow, error) {
	row := q.db.QueryRowContext(ctx, getInventory, productid)
	var i GetInventoryRow
	err := row.Scan(
		&i.ID,
		&i.Productid,
		&i.Name,
		&i.Quantity,
	)
	return i, err
}

const getListInventories = `-- name: GetListInventories :many
SELECT 
  Inventories.ID,
  Inventories.ProductID,
  Products.Name,
  Inventories.Quantity
FROM Inventories
LEFT JOIN Products ON Inventories.ProductID = Products.ID
LIMIT ? OFFSET ?
`

type GetListInventoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetListInventoriesRow struct {
	ID        string         `json:"id"`
	Productid string         `json:"productid"`
	Name      sql.NullString `json:"name"`
	Quantity  int32          `json:"quantity"`
}

func (q *Queries) GetListInventories(ctx context.Context, arg GetListInventoriesParams) ([]GetListInventoriesRow, error) {
	rows, err := q.db.QueryContext(ctx, getListInventories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListInventoriesRow{}
	for rows.Next() {
		var i GetListInventoriesRow
		if err := rows.Scan(
			&i.ID,
			&i.Productid,
			&i.Name,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInventoryQuantity = `-- name: UpdateInventoryQuantity :exec
UPDATE Inventories
SET Quantity = Quantity + ?,
    Modified = current_timestamp
WHERE ProductID = ?
`

type UpdateInventoryQuantityParams struct {
	Quantity  int32  `json:"quantity"`
	Productid string `json:"productid"`
}

func (q *Queries) UpdateInventoryQuantity(ctx context.Context, arg UpdateInventoryQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateInventoryQuantity, arg.Quantity, arg.Productid)
	return err
}
